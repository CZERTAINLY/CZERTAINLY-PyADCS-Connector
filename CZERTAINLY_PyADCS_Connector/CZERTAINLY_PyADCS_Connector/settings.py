"""
Django settings for CZERTAINLY_PyADCS_Connector project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import sys
from pathlib import Path
from typing import Dict

import environ

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOG_LEVEL_PREFIX = "LOG_LEVEL_"

def _to_logger_name(env_key_tail: str) -> str:
    return env_key_tail.replace("__", ".").lower()  # leave single '_' alone

def _collect_levels() -> Dict[str, str]:
    levels: Dict[str, str] = {}
    for key, val in os.environ.items():
        if not key.startswith(LOG_LEVEL_PREFIX):
            continue
        name_tail = key[len(LOG_LEVEL_PREFIX):]
        level = str(val).upper().strip()
        if name_tail.upper() == "ROOT":
            levels["__root__"] = level
        else:
            levels[_to_logger_name(name_tail)] = level
    return levels

LEVELS = _collect_levels()

def _logger_entry(level: str):
    # OFF disables entirely
    if level in {"OFF", "NONE", "DISABLE", "DISABLED"}:
        return {"handlers": ["console"], "level": "CRITICAL", "propagate": False}
    # otherwise log to console at the given level
    return {"handlers": ["console"], "level": level, "propagate": False}

ADCS_SEARCH_PAGE_SIZE = env("ADCS_SEARCH_PAGE_SIZE", default=1000)
ADCS_ISSUE_POLLING_INTERVAL = env("ADCS_ISSUE_POLLING_INTERVAL", default=100)
ADCS_ISSUE_POLLING_TIMEOUT = env("ADCS_ISSUE_POLLING_TIMEOUT", default=3000)
ADCS_POOL_MAX_SIZE = env("ADCS_POOL_MAX_SIZE", default=30)
ADCS_POOL_MIN_WARM_SIZE = env("ADCS_POOL_MIN_WARM_SIZE", default=10)
ADCS_POOL_MAX_IDLE_SECONDS = env("ADCS_POOL_MAX_IDLE_SECONDS", default=900)
ADCS_POOL_KEEPALIVE_INTERVAL = env("ADCS_POOL_KEEPALIVE_INTERVAL", default=120)

# Prefix used for all database tables
DATABASE_SCHEMA = env("DATABASE_SCHEMA", default="pyadcs")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#&r@=wiy9^evuhbhg8fis%y$54i!d-2%hfh^l$sh1jzk&$l$+d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# ALLOWED_HOSTS = ["127.0.0.1", "localhost"]
ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    # 'django.contrib.auth',
    # 'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.messages',
    # 'django.contrib.staticfiles',
    "PyADCSConnector.apps.PyADCSConnectorConfig"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'PyADCSConnector.exceptions.exception_handler.ExceptionHandlerMiddleware'
]

ROOT_URLCONF = 'CZERTAINLY_PyADCS_Connector.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CZERTAINLY_PyADCS_Connector.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env("DATABASE_NAME"),
        'USER': env("DATABASE_USER"),
        'PASSWORD': env("DATABASE_PASSWORD"),
        'HOST': env("DATABASE_HOST", default="localhost"),
        'PORT': env("DATABASE_PORT", default="5432")
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "console_formatter": {
            "()": "PyADCSConnector.utils.logging.MillisecondFormatter",
            "format": "{asctime} {levelname} {name} {module} {processName:s}-{process:d} {threadName:s}-{thread:d} "
                      "{funcName:s} : {message}",
            "datefmt": "%Y-%m-%dT%H:%M:%S.%f%z",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console_formatter"
        },
    },
    "loggers": {name: _logger_entry(level) for name, level in LEVELS.items()},
    "root": {
        "handlers": ["console"],
        "level": env("LOG_LEVEL", default="INFO"),
    },
}
